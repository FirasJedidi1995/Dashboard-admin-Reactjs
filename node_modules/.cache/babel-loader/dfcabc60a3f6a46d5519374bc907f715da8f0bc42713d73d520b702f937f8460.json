{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Dashboard Admin\\\\dashboard\\\\src\\\\routes\\\\Routes.js\",\n  _s = $RefreshSig$();\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport { useAuth } from \"../provider/authProvider.js\";\nimport { ProtectedRoute } from \"./ProtectedRoute.js\";\nimport Logout from \"../pages/Logout.js\";\nimport Login from \"../pages/Login\";\nimport Dashboard from \"../Dashboard/Dashboard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Routes = () => {\n  _s();\n  const {\n    token\n  } = useAuth();\n\n  // Define public routes accessible to all users\n  const routesForPublic = [{\n    path: \"/service\",\n    element: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Service Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this)\n  }, {\n    path: \"/about-us\",\n    element: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"About Us\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this)\n  }];\n\n  // Define routes accessible only to authenticated users\n  const routesForAuthenticatedOnly = [{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this),\n    // Wrap the component in ProtectedRoute\n    children: [{\n      path: \"\",\n      element: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"User Home Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: \"/dashboard\",\n      element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: \"/logout\",\n      element: /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }, this)\n    }]\n  }];\n\n  // Define routes accessible only to non-authenticated users\n  const routesForNotAuthenticatedOnly = [{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Home Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this)\n  }, {\n    path: \"/login\",\n    element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this)\n  }];\n\n  // Combine and conditionally include routes based on authentication status\n  const router = createBrowserRouter([...routesForPublic, ...(!token ? routesForNotAuthenticatedOnly : []), ...routesForAuthenticatedOnly]);\n\n  // Provide the router configuration using RouterProvider\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n_s(Routes, \"ZpOvj47KCDv4EW5BIUHQHDAsr3M=\", false, function () {\n  return [useAuth];\n});\n_c = Routes;\nexport default Routes;\nvar _c;\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","useAuth","ProtectedRoute","Logout","Login","Dashboard","jsxDEV","_jsxDEV","Routes","_s","token","routesForPublic","path","element","children","fileName","_jsxFileName","lineNumber","columnNumber","routesForAuthenticatedOnly","routesForNotAuthenticatedOnly","router","_c","$RefreshReg$"],"sources":["C:/Users/MSI/Desktop/Dashboard Admin/dashboard/src/routes/Routes.js"],"sourcesContent":["import { RouterProvider, createBrowserRouter } from \"react-router-dom\";\r\nimport { useAuth } from \"../provider/authProvider.js\";\r\nimport { ProtectedRoute } from \"./ProtectedRoute.js\";\r\n\r\nimport Logout from \"../pages/Logout.js\";\r\nimport Login from \"../pages/Login\";\r\nimport Dashboard from \"../Dashboard/Dashboard.js\";\r\n\r\nconst Routes = () => {\r\n  const { token } = useAuth();\r\n\r\n  // Define public routes accessible to all users\r\n  const routesForPublic = [\r\n    {\r\n      path: \"/service\",\r\n      element: <div>Service Page</div>,\r\n    },\r\n    {\r\n      path: \"/about-us\",\r\n      element: <div>About Us</div>,\r\n    },\r\n  ];\r\n\r\n  // Define routes accessible only to authenticated users\r\n  const routesForAuthenticatedOnly = [\r\n    {\r\n      path: \"/\",\r\n      element: <ProtectedRoute />, // Wrap the component in ProtectedRoute\r\n      children: [\r\n        {\r\n          path: \"\",\r\n          element: <div>User Home Page</div>,\r\n        },\r\n        {\r\n          path: \"/dashboard\",\r\n          element: <Dashboard/>,\r\n        },\r\n        {\r\n          path: \"/logout\",\r\n          element: <Logout />,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Define routes accessible only to non-authenticated users\r\n  const routesForNotAuthenticatedOnly = [\r\n    {\r\n      path: \"/\",\r\n      element: <div>Home Page</div>,\r\n    },\r\n    {\r\n      path: \"/login\",\r\n      element: <Login/>,\r\n    },\r\n  ];\r\n\r\n  // Combine and conditionally include routes based on authentication status\r\n  const router = createBrowserRouter([\r\n    ...routesForPublic,\r\n    ...(!token ? routesForNotAuthenticatedOnly : []),\r\n    ...routesForAuthenticatedOnly,\r\n  ]);\r\n\r\n  // Provide the router configuration using RouterProvider\r\n  return <RouterProvider router={router} />;\r\n};\r\n\r\nexport default Routes;\r\n"],"mappings":";;AAAA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,kBAAkB;AACtE,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,cAAc,QAAQ,qBAAqB;AAEpD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,SAAS,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAM,CAAC,GAAGT,OAAO,CAAC,CAAC;;EAE3B;EACA,MAAMU,eAAe,GAAG,CACtB;IACEC,IAAI,EAAE,UAAU;IAChBC,OAAO,eAAEN,OAAA;MAAAO,QAAA,EAAK;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EACjC,CAAC,EACD;IACEN,IAAI,EAAE,WAAW;IACjBC,OAAO,eAAEN,OAAA;MAAAO,QAAA,EAAK;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAC7B,CAAC,CACF;;EAED;EACA,MAAMC,0BAA0B,GAAG,CACjC;IACEP,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEN,OAAA,CAACL,cAAc;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAAE;IAC7BJ,QAAQ,EAAE,CACR;MACEF,IAAI,EAAE,EAAE;MACRC,OAAO,eAAEN,OAAA;QAAAO,QAAA,EAAK;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IACnC,CAAC,EACD;MACEN,IAAI,EAAE,YAAY;MAClBC,OAAO,eAAEN,OAAA,CAACF,SAAS;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IACtB,CAAC,EACD;MACEN,IAAI,EAAE,SAAS;MACfC,OAAO,eAAEN,OAAA,CAACJ,MAAM;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACpB,CAAC;EAEL,CAAC,CACF;;EAED;EACA,MAAME,6BAA6B,GAAG,CACpC;IACER,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEN,OAAA;MAAAO,QAAA,EAAK;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAC9B,CAAC,EACD;IACEN,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAEN,OAAA,CAACH,KAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAClB,CAAC,CACF;;EAED;EACA,MAAMG,MAAM,GAAGrB,mBAAmB,CAAC,CACjC,GAAGW,eAAe,EAClB,IAAI,CAACD,KAAK,GAAGU,6BAA6B,GAAG,EAAE,CAAC,EAChD,GAAGD,0BAA0B,CAC9B,CAAC;;EAEF;EACA,oBAAOZ,OAAA,CAACR,cAAc;IAACsB,MAAM,EAAEA;EAAO;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C,CAAC;AAACT,EAAA,CA1DID,MAAM;EAAA,QACQP,OAAO;AAAA;AAAAqB,EAAA,GADrBd,MAAM;AA4DZ,eAAeA,MAAM;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}